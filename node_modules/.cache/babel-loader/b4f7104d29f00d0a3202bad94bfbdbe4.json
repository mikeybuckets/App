{"ast":null,"code":"export var focusHandling = function focusHandling() {\n  var prop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  // make focus ring visible only for keyboard navigation\n  var focusEls = document.querySelectorAll('a, button, input, select, textarea, .form-switch, [tabindex]');\n\n  var resetFocusEls = function resetFocusEls(bool) {\n    var outlineStyle = bool ? '' : 'none';\n    focusEls.forEach(function (focusTab) {\n      (!prop || prop === 'outline') && focusTab.style.setProperty('outline', outlineStyle);\n      (!prop || prop === 'box-shadow') && focusTab.style.setProperty('box-shadow', outlineStyle);\n    });\n  };\n\n  var detectClick = function detectClick() {\n    if (focusEls.length > 0) {\n      resetFocusEls(false); // eslint-disable-next-line no-use-before-define\n\n      window.addEventListener('keydown', detectTab);\n    }\n\n    window.removeEventListener('mousedown', detectClick);\n  };\n\n  var detectTab = function detectTab(event) {\n    if (event.keyCode !== 9) return;\n    resetFocusEls(true);\n    window.removeEventListener('keydown', detectTab);\n    window.addEventListener('mousedown', detectClick);\n  };\n\n  window.addEventListener('mousedown', detectClick);\n};","map":{"version":3,"sources":["C:/Users/MC/Desktop/Builds/simple-react-resume_090921/node_modules/cruip-js-toolkit/lib/focusHandling.js"],"names":["focusHandling","prop","focusEls","document","querySelectorAll","resetFocusEls","bool","outlineStyle","forEach","focusTab","style","setProperty","detectClick","length","window","addEventListener","detectTab","removeEventListener","event","keyCode"],"mappings":"AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAiB;AAAA,MAAhBC,IAAgB,uEAAT,IAAS;AAC1C;AACA,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,8DAA1B,CAAjB;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AAC5B,QAAMC,YAAY,GAAGD,IAAI,GAAG,EAAH,GAAQ,MAAjC;AACAJ,IAAAA,QAAQ,CAACM,OAAT,CAAiB,UAACC,QAAD,EAAc;AAC3B,OAAC,CAACR,IAAD,IAASA,IAAI,KAAK,SAAnB,KAAiCQ,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2B,SAA3B,EAAsCJ,YAAtC,CAAjC;AACA,OAAC,CAACN,IAAD,IAASA,IAAI,KAAK,YAAnB,KAAoCQ,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2B,YAA3B,EAAyCJ,YAAzC,CAApC;AACH,KAHD;AAIH,GAND;;AAOA,MAAMK,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,QAAIV,QAAQ,CAACW,MAAT,GAAkB,CAAtB,EAAyB;AACrBR,MAAAA,aAAa,CAAC,KAAD,CAAb,CADqB,CAErB;;AACAS,MAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCC,SAAnC;AACH;;AACDF,IAAAA,MAAM,CAACG,mBAAP,CAA2B,WAA3B,EAAwCL,WAAxC;AACH,GAPD;;AAQA,MAAMI,SAAS,GAAG,SAAZA,SAAY,CAACE,KAAD,EAAW;AACzB,QAAIA,KAAK,CAACC,OAAN,KAAkB,CAAtB,EACI;AACJd,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAS,IAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsCD,SAAtC;AACAF,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqCH,WAArC;AACH,GAND;;AAOAE,EAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqCH,WAArC;AACH,CA1BM","sourcesContent":["export const focusHandling = (prop = null) => {\n    // make focus ring visible only for keyboard navigation\n    const focusEls = document.querySelectorAll('a, button, input, select, textarea, .form-switch, [tabindex]');\n    const resetFocusEls = (bool) => {\n        const outlineStyle = bool ? '' : 'none';\n        focusEls.forEach((focusTab) => {\n            (!prop || prop === 'outline') && focusTab.style.setProperty('outline', outlineStyle);\n            (!prop || prop === 'box-shadow') && focusTab.style.setProperty('box-shadow', outlineStyle);\n        });\n    };\n    const detectClick = () => {\n        if (focusEls.length > 0) {\n            resetFocusEls(false);\n            // eslint-disable-next-line no-use-before-define\n            window.addEventListener('keydown', detectTab);\n        }\n        window.removeEventListener('mousedown', detectClick);\n    };\n    const detectTab = (event) => {\n        if (event.keyCode !== 9)\n            return;\n        resetFocusEls(true);\n        window.removeEventListener('keydown', detectTab);\n        window.addEventListener('mousedown', detectClick);\n    };\n    window.addEventListener('mousedown', detectClick);\n};\n"]},"metadata":{},"sourceType":"module"}